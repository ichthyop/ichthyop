## Orientation

Active swimming has been implemented in Ichthyop following the work of Romain Chaput.
Three active swimming behaviours have been implemented: the rheotaxis orientation (i.e. against the current), the
cardinal orientation (i.e toward a given direction) and the reef orientation, i.e. orientation toward points of interests.

These three implementations involve the computation of a swimming velocity and direction. The former is common to all
three methods, but the directions depend on the method considered.

```{python}
#| echo: false
#| output: false

import os
from glob import glob
import subprocess

conflist = glob(os.path.join('ichthyop_configs', '*'))
conflist.sort()

confnames = [os.path.basename(f) for f in conflist]
for conf in confnames:
    if os.path.isdir(os.path.join('ichthyop_output', conf)):
        print(f"Configuration {conf} already exists in output directory")
        continue
    else:
        jarname = glob(os.path.join('..', 'target', 'ichthyop*[0-9].jar'))
        print(jarname)
        jarname.sort()
        jarname = jarname[-1]
        print(jarname)
        command = ['java', '-jar', jarname, os.path.join('ichthyop_configs', conf, f'{conf}.xml')]
        print(command)
        result = subprocess.run(command, capture_output=False, text=False, stdout=subprocess.DEVNULL)
```


```{python}
#|label: fig-ref-control
#|fig-cap: "Trajectory without orientation"
#|echo: false
#|output: false

import xarray as xr
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import os
from glob import glob
import matplotlib.pyplot as plt
import numpy as np
import matplotlib as mpl

config = 'control'

if os.path.isdir('ichthyop_output'):
    pattern = os.path.join('ichthyop_output', config, '*nc')
else :
    pattern = os.path.join('..', '..', 'ichthyop_output', config, '*nc')
pattern

filelist = glob(pattern)
filelist

data = xr.open_mfdataset(filelist, decode_times=False)
data

# +
lon = data['lon'].values
lat = data['lat'].values
mort = data['mortality'].values

lon = np.ma.masked_where(mort > 0, lon)
lat = np.ma.masked_where(mort > 0, lat)
ntime, ndrifters = lon.shape

# +
time = np.arange(ntime)
drifters = np.arange(ndrifters)

d2d, t2d = np.meshgrid(drifters, time)

# +
plt.figure()

projin = ccrs.PlateCarree()
projout = ccrs.PlateCarree()

ax = plt.axes(projection = projout)
ax.scatter(lon[:, :], lat[:, :], c=t2d, marker='.', transform=projin, s=0.5, cmap=mpl.colormaps['jet'])
feat = ax.add_feature(cfeature.LAND)
feat = ax.add_feature(cfeature.COASTLINE)
ax.set_extent([49, 55.25, -13.13, -9.45], crs=projin)
```

### Swimming velocity

The orientation processes all share common features. They both depend on a swimming velocity and random directions. The methods described
below differ on the way the random directions are drafted.

Swimming velocity is computed following {cite}`staatermanOrientationBehaviorFish2012`:

#|echo: false
$$
V = V_{hatch} + (V_{settle} - V_{hatch}) ^ {\log(age) / \log(PLD)}
$$

with $V_{hatch}$ and $V_{settle}$ the larval velocity at hatching and settle, $A$ the age of the larva and
$PLD$ the transport duraction.

```{python}
#|echo: false
#|output: false
import matplotlib.pyplot as plt
import numpy as np
from scipy.special import i0

PLD = 10
x = np.linspace(0, PLD, 1000)[1:]

vhatch = 10
vsettle = 200

vel = vhatch + np.power(vsettle - vhatch, np.log10(x)/np.log10(PLD))

plt.figure()
plt.plot(x, vel)
plt.xlabel('Age (days)')
plt.ylabel('$V (cm.s^{-1})$')
plt.xlim(x.min(), x.max())
plt.title('$PLD = %dd, V_{hatch}=%d cm.s^{-1}, V_{settle}=%d cm.s^{-1}$' %(PLD, vhatch, vsettle))
plt.show()
```

### Von Mises distributions

Von Mises distribution is used in all three methods.The Von Mises distribution is given by:

$$
f(\theta, \mu, \kappa) = \dfrac
{\exp(\kappa \cos(\theta - \mu))}
{2 \pi I_{0}(\kappa)}
$$

where $I_{0}(\kappa)$ is the modified Bessel function of the first kind of order 0,
$\mu$ is angle where the distribution is centerred and $\kappa$ is the concentration
parameter. The distribution is as follows:

```{python}
import matplotlib.pyplot as plt
import numpy as np
from scipy.special import i0

x = np.linspace(-np.pi, np.pi, 200)

def von_misses(kappa):
    mu = 0
    y = np.exp(kappa*np.cos(x-mu))/(2*np.pi*i0(kappa))
    return y

plt.figure()

for i in [0.5, 1, 2, 5, 10, 20]:
    plt.plot(x, von_misses(i), label=f'$\kappa = {i}$')
plt.legend()
plt.xlim(x.min(), x.max())
plt.show()
```

For computation purposes, all the Von Mises drafts performed in Ichthyop are done by using $mu = 0$. The
angles are thus centerred around 0. Then, the $mu$ value is added.

:::{.callout-note}
$\theta = 0$ is eastward, $\theta = \frac{\pi}{2}$ is northward, etc.
:::

### Computation of displacement

Given a swimming velocity $V$ and a direction $\theta$,
the larva displacement (in $m$) is computed as follows:

$$
\Delta X = V \times \cos(\theta) \times \Delta t
$$

$$
\Delta Y = V \times \sin(\theta) \times \Delta t
$$

with $\Delta t$ the time step. Next, the corresponding change in longitude ($\lambda$) and latitude ($\varphi$) is computed as follows:

$$
\Delta \lambda = \dfrac{\Delta X}{111138 \times \cos{\varphi}}
$$

$$
\Delta \varphi = \dfrac{\Delta Y}{111138 }
$$

### Cardinal orientation

In cardinal orientation, the user provides a fixed heading $\theta_{card}$ and a fixed $\kappa$ parameter.
Then, at each time step, a new angle is randomly drafted following a Von Misses distribution $f(\theta, \theta_{card}, \kappa)$.


```{python}
import xarray as xr
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import os
from glob import glob
import matplotlib.pyplot as plt
import numpy as np
import matplotlib as mpl

config = 'card'

if os.path.isdir('ichthyop_output'):
    pattern = os.path.join('ichthyop_output', config, '*nc')
else :
    pattern = os.path.join('..', '..', 'ichthyop_output', config, '*nc')
pattern

filelist = glob(pattern)
filelist

data = xr.open_mfdataset(filelist, decode_times=False)
data

# +
lon = data['lon'].values
lat = data['lat'].values
mort = data['mortality'].values

lon = np.ma.masked_where(mort > 0, lon)
lat = np.ma.masked_where(mort > 0, lat)
ntime, ndrifters = lon.shape

# +
time = np.arange(ntime)
drifters = np.arange(ndrifters)

d2d, t2d = np.meshgrid(drifters, time)

# +
plt.figure()

projin = ccrs.PlateCarree()
projout = ccrs.PlateCarree()

ax = plt.axes(projection = projout)
ax.scatter(lon[:, :], lat[:, :], c=t2d, marker='.', transform=projin, s=0.5, cmap=mpl.colormaps['jet'])
feat = ax.add_feature(cfeature.LAND)
feat = ax.add_feature(cfeature.COASTLINE)
ax.set_extent([49, 55.25, -13.13, -9.45], crs=projin)

```

### Rheotaxis orientation

In the rheotaxis orientation method, the particles swim against the current. The user only provides a kappa parameter.

First, the angle of the current is computed as follows:

$$
\theta_{current} = \arctan2(V_{current}, U_{current})
$$

Then, the angle that the particle must follow is given by adding $\pi$:

$$
\theta_{direction} = \theta_{current} + \pi
$$

Finally, a random angle is picked up following a Von Mises distribution $f(\theta, \theta_{direction}, \kappa_{reef})$

(ref-rheo)=

```{python}
import xarray as xr
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import os
from glob import glob
import matplotlib.pyplot as plt
import numpy as np
import matplotlib as mpl

config = 'rheo'

if os.path.isdir('ichthyop_output'):
    pattern = os.path.join('ichthyop_output', config, '*nc')
else :
    pattern = os.path.join('..', '..', 'ichthyop_output', config, '*nc')
pattern

filelist = glob(pattern)
filelist

data = xr.open_mfdataset(filelist, decode_times=False)
data

# +
lon = data['lon'].values
lat = data['lat'].values
mort = data['mortality'].values

lon = np.ma.masked_where(mort > 0, lon)
lat = np.ma.masked_where(mort > 0, lat)
ntime, ndrifters = lon.shape

# +
time = np.arange(ntime)
drifters = np.arange(ndrifters)

d2d, t2d = np.meshgrid(drifters, time)

# +
plt.figure()

projin = ccrs.PlateCarree()
projout = ccrs.PlateCarree()

ax = plt.axes(projection = projout)
ax.scatter(lon[:, :], lat[:, :], c=t2d, marker='.', transform=projin, s=0.5, cmap=mpl.colormaps['jet'])
feat = ax.add_feature(cfeature.LAND)
feat = ax.add_feature(cfeature.COASTLINE)
ax.set_extent([49, 55.25, -13.13, -9.45], crs=projin)
```

### Reef orientation

In the reef orientation method, the larva will target the closest target area (for instance coral reef).
These areas are defined in an `XML` zone file by a polygon and a zone-specific $\kappa$ parameter. The user also provides the sensory detection threshold of the larva (maximum detection distance $\beta$).

If the distance between the particle and the barycenter of the closest reef ($D$) is below
the detection thereshold $\beta$, the larva will swim in the direction of the reef.

(ref-orientation)=

```{python}
import numpy as np
import matplotlib.pyplot as plt

plt.rcParams['font.size'] = 15

plt.figure(figsize = (10, 10))

xnew = 0
ynew = 0

#draw point at orgin
plt.plot(xnew, ynew, color = 'red', marker = 'o')
plt.gca().annotate('$P_{t}$', xy=(0 + 0.05, 0 - 0.07), xycoords='data', color='red')

#draw circle
r = 1.5
angles = np.linspace(0 * np.pi, 2 * np.pi, 100 )
xs = r * np.cos(angles)
ys = r * np.sin(angles)
plt.plot(xs, ys, color = 'k', ls='--', lw=0.5)

angle_old = np.pi / 6.
rold = 1.
xold = rold * np.cos(angle_old)
yold = rold * np.sin(angle_old)

plt.plot(xold, yold, marker='o', color='blue')
plt.gca().annotate('$P_{t - 1}$', xy=(xold + 0.05, yold), xycoords='data', color='blue')

angle_reef = np.pi + np.pi / 3.
print(np.rad2deg(angle_reef))
rreef = 1
xreef = rreef * np.cos(angle_reef)
yreef = rreef * np.sin(angle_reef)
print(yreef)

plt.plot(xreef, yreef, marker='o', color='orange')
plt.gca().annotate('$R$', xy=(xreef + 0.1, yreef), xycoords='data', color='orange')

plt.gca().annotate(r'$D$', xy=(0.5*(xreef) + 0.02, 0.5*yreef), xycoords='data', color='orange', ha='left')

plt.axvline(xnew, color='k', ls='--', lw=0.5)
plt.axhline(ynew, color='k', ls='--', lw=0.5)

p = np.polyfit([xold, xnew], [yold, ynew], deg=1)
xtemp = np.linspace(xold, xold -2, 100)
plt.plot(xtemp, np.polyval(p, xtemp), color='black', ls='--')

angle_current = angle_old + np.pi
tmp_angle = np.linspace(0, angle_current, 100)
rtmp = 0.2
plt.plot(0 + rtmp * np.cos(tmp_angle), 0 + rtmp * np.sin(tmp_angle), color='k', ls='--')
plt.gca().annotate(r'$\theta_{actual}$', xy=(xnew + 0.2, ynew+0.05), xycoords='data', color='k')


plt.plot([xnew, xreef], [ynew, yreef], color='orange', ls='--')
angle_current = angle_reef
tmp_angle = np.linspace(0, angle_current, 100)
rtmp = 0.3
plt.plot(0 + rtmp * np.cos(tmp_angle), 0 + rtmp * np.sin(tmp_angle), color='orange', ls='--')
plt.gca().annotate(r'$\theta_{reef}$', xy=(xnew - 0.3, ynew+0.1), xycoords='data', color='orange',ha='right')

angle_current = angle_old + np.pi
tmp_angle = np.linspace(angle_current, angle_reef, 100)
rtmp = 0.4
plt.plot(0 + rtmp * np.cos(tmp_angle), 0 + rtmp * np.sin(tmp_angle), color='plum', ls='--')
plt.gca().annotate(r'$\theta_{turning}$', xy=(-0.43, -0.34), xycoords='data', color='plum')

off = 0.05
plt.xlim(xreef - off, xold + off)
plt.ylim(yreef - off, yold + off)
plt.gca().set_aspect('equal')
plt.axis('off')
plt.show()
```

First, the angle of the current trajectory, $\theta_{actual}$, is computed by using
the particle position at the previous time step (blue point) and the actual position (red point).

$$
\Delta_X = (X_{t - 1} - X_{t})
$$

$$
\Delta_Y = (Y_{t - 1} - Y_{t})
$$

$$
\theta_{actual} = \arctan2(\Delta Y, \Delta X) + \pi
$$

The direction toward the reef, $\theta_{reef}$ is also computed.

$$
\Delta_X = (X_{reef} - X_{t})
$$

$$
\Delta_Y = (Y_{reef} - Y_{t})
$$

$$
\theta_{reef} = \arctan2(\Delta Y, \Delta X)
$$

:::{.callout-warning}
The angles are computed in the $(X, Y)$ space. Therefore, longitude and latitude coordinates
are converted in $(X, Y)$ using the `latlon2xy` Dataset methods.
:::

The turning angle $\theta_{turning}$ is given by:

$$
\theta_{turning} = \theta_{reef} - \theta_{actual}
$$

The turning angle is then ponderated by the ratio of the distance from the reef to
the detection threshold as follows:

$$
\theta_{ponderated} = \left(1 - \dfrac{D}{\beta}\right) \theta_{turning}
$$

$$
\theta_{ponderated} = \left(1 - \dfrac{D}{\beta}\right) \left(\theta_{reef} - \theta_{actual}\right)
$$

Therefore, the closest to the reef, the strongest the turning angle.

Then, a random angle is picked up following a Von Mises distribution $f(\theta, \theta_{ponderated}, \kappa_{reef})$

An example of a trajectory is provided below. In this case, two
target destinations are provided (black boxes). The same $\kappa$ value was
used for both ares (1.2) and the $\beta$ parameter has been set equal to 3 km.

(ref-orientation-2)=

```{python}
import xarray as xr
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import os
from glob import glob
import matplotlib.pyplot as plt
import numpy as np
import matplotlib as mpl

config = 'reef'

if os.path.isdir('ichthyop_output'):
    pattern = os.path.join('ichthyop_output', config, '*nc')
else :
    pattern = os.path.join('..', '..', 'ichthyop_output', config, '*nc')
pattern

filelist = glob(pattern)
filelist

data = xr.open_mfdataset(filelist, decode_times=False)
data

# +
lon = data['lon'].values
lat = data['lat'].values
mort = data['mortality'].values

lon = np.ma.masked_where(mort > 0, lon)
lat = np.ma.masked_where(mort > 0, lat)
ntime, ndrifters = lon.shape

# +
time = np.arange(ntime)
drifters = np.arange(ndrifters)

d2d, t2d = np.meshgrid(drifters, time)

# +
plt.figure()

projin = ccrs.PlateCarree()
projout = ccrs.PlateCarree()

ax = plt.axes(projection = projout)
ax.scatter(lon[:, :], lat[:, :], c=t2d, marker='.', transform=projin, s=0.5, cmap=mpl.colormaps['jet'])
feat = ax.add_feature(cfeature.LAND)
feat = ax.add_feature(cfeature.COASTLINE)
xp = np.array([51.625, 52.625, 52.625,51.625, 51.625])
yp = np.array([-1.179878E1, -1.179878E1, -1.079878E1, -1.079878E1, -1.179878E1])
ax.plot(xp, yp, transform=projin, color='k', ls='--')
xp = np.array([51.625, 52.625 - 0.5, 52.625 - 0.5,51.625, 51.625]) - 1
yp = np.array([-1.179878E1 + 0.5, -1.179878E1 + 0.5, -1.079878E1, -1.079878E1, -1.179878E1 + 0.5]) - 0.25
ax.plot(xp, yp, transform=projin, color='k', ls='--')
ax.set_extent([49, 55.25, -13.13, -9.45], crs=projin)
```
