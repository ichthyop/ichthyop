/* 
 * ICHTHYOP, a Lagrangian tool for simulating ichthyoplankton dynamics
 * http://www.ichthyop.org
 *
 * Copyright (C) IRD (Institut de Recherce pour le Developpement) 2006-2016
 * http://www.ird.fr
 *
 * Main developper: Philippe VERLEY (philippe.verley@ird.fr)
 * Contributors (alphabetically sorted):
 * Gwendoline ANDRES, Sylvain BONHOMMEAU, Bruno BLANKE, Timoth√©e BROCHIER,
 * Christophe HOURDIN, Mariem JELASSI, David KAPLAN, Fabrice LECORNU,
 * Christophe LETT, Christian MULLON, Carolina PARADA, Pierrick PENVEN,
 * Stephane POUS, Nathan PUTMAN.
 *
 * Ichthyop is a free Java tool designed to study the effects of physical and
 * biological factors on ichthyoplankton dynamics. It incorporates the most
 * important processes involved in fish early life: spawning, movement, growth,
 * mortality and recruitment. The tool uses as input time series of velocity,
 * temperature and salinity fields archived from oceanic models such as NEMO,
 * ROMS, MARS or SYMPHONIE. It runs with a user-friendly graphic interface and
 * generates output files that can be post-processed easily using graphic and
 * statistical software. 
 *
 * To cite Ichthyop, please refer to Lett et al. 2008
 * A Lagrangian Tool for Modelling Ichthyoplankton Dynamics
 * Environmental Modelling & Software 23, no. 9 (September 2008) 1210-1214
 * doi:10.1016/j.envsoft.2008.02.005
 *
 * This software is governed by the CeCILL-B license under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/ or redistribute the software under the terms of the CeCILL-B license as
 * circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and rights to copy, modify
 * and redistribute granted by the license, users are provided only with a
 * limited warranty and the software's author, the holder of the economic
 * rights, and the successive licensors have only limited liability.
 *
 * In this respect, the user's attention is drawn to the risks associated with
 * loading, using, modifying and/or developing or reproducing the software by
 * the user in light of its specific status of free software, that may mean that
 * it is complicated to manipulate, and that also therefore means that it is
 * reserved for developers and experienced professionals having in-depth
 * computer knowledge. Users are therefore encouraged to load and test the
 * software's suitability as regards their requirements in conditions enabling
 * the security of their systems and/or data to be ensured and, more generally,
 * to use and operate it in the same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-B license and that you accept its terms.
 */

package org.ichthyop.ui;

import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import org.ichthyop.manager.SimulationManager;

/**
 *
 * @author pverley
 */
public class JRunProgressPanel extends javax.swing.JPanel {
    
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblProgress;
    private javax.swing.JLabel lblTimeLeft;
    private javax.swing.JProgressBar progressBar;

    /** Creates new form JRunProgressPanel */
    public JRunProgressPanel() {
        initComponents();
    }

    public void resetProgressBar() {
        progressBar.setValue(0);
        lblTimeLeft.setText(getResourceMap().getString("lblTimeLeftCurrent.text"));
    }

    private ResourceMap getResourceMap() {
        return Application.getInstance().getContext().getResourceMap(JRunProgressPanel.class);
    }

    public void hideBars() {
        lblProgress.setVisible(false);
        progressBar.setVisible(false);
        lblTimeLeft.setVisible(false);
    }

    public void setupProgress() {
        // show progress bar for current simulation
        lblProgress.setVisible(true);
        progressBar.setVisible(true);
        lblTimeLeft.setVisible(true);
    }

    public void printProgress() {

        if (progressBar.isVisible()) {
            progressBar.setValue(getSimulationManager().getTimeManager().progress());
            lblTimeLeft.setText(getSimulationManager().getTimeManager().printProgress());
        }
    }

    private SimulationManager getSimulationManager() {
        return SimulationManager.getInstance();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        lblProgress = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        lblTimeLeft = new javax.swing.JLabel();
        lblIcon = new javax.swing.JLabel();

        setOpaque(false);

        lblProgress.setText("Current simulation");
        lblProgress.setForeground(java.awt.Color.white);
        lblProgress.setName("lblProgressCurrent"); // NOI18N

        progressBar.setName("progressBarCurrent"); // NOI18N
        progressBar.setStringPainted(true);

        lblTimeLeft.setText("time left");
        lblTimeLeft.setForeground(new java.awt.Color(255, 255, 255));
        lblTimeLeft.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        lblTimeLeft.setName("lblTimeLeftCurrent"); // NOI18N

        lblIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/ichthyop/ui/resources/images/ico256/run-simulation.png"))); // NOI18N
        lblIcon.setName("lblIcon"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblProgress))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblTimeLeft)))
                    .addComponent(lblIcon, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblProgress)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblTimeLeft)))
                .addContainerGap())
        );
    }
}
