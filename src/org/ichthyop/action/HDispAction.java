/* 
 * ICHTHYOP, a Lagrangian tool for simulating ichthyoplankton dynamics
 * http://www.ichthyop.org
 *
 * Copyright (C) IRD (Institut de Recherce pour le Developpement) 2006-2016
 * http://www.ird.fr
 *
 * Main developper: Philippe VERLEY (philippe.verley@ird.fr)
 * Contributors (alphabetically sorted):
 * Gwendoline ANDRES, Sylvain BONHOMMEAU, Bruno BLANKE, Timoth√©e BROCHIER,
 * Christophe HOURDIN, Mariem JELASSI, David KAPLAN, Fabrice LECORNU,
 * Christophe LETT, Christian MULLON, Carolina PARADA, Pierrick PENVEN,
 * Stephane POUS, Nathan PUTMAN.
 *
 * Ichthyop is a free Java tool designed to study the effects of physical and
 * biological factors on ichthyoplankton dynamics. It incorporates the most
 * important processes involved in fish early life: spawning, movement, growth,
 * mortality and recruitment. The tool uses as input time series of velocity,
 * temperature and salinity fields archived from oceanic models such as NEMO,
 * ROMS, MARS or SYMPHONIE. It runs with a user-friendly graphic interface and
 * generates output files that can be post-processed easily using graphic and
 * statistical software. 
 *
 * To cite Ichthyop, please refer to Lett et al. 2008
 * A Lagrangian Tool for Modelling Ichthyoplankton Dynamics
 * Environmental Modelling & Software 23, no. 9 (September 2008) 1210-1214
 * doi:10.1016/j.envsoft.2008.02.005
 *
 * This software is governed by the CeCILL-B license under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/ or redistribute the software under the terms of the CeCILL-B license as
 * circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and rights to copy, modify
 * and redistribute granted by the license, users are provided only with a
 * limited warranty and the software's author, the holder of the economic
 * rights, and the successive licensors have only limited liability.
 *
 * In this respect, the user's attention is drawn to the risks associated with
 * loading, using, modifying and/or developing or reproducing the software by
 * the user in light of its specific status of free software, that may mean that
 * it is complicated to manipulate, and that also therefore means that it is
 * reserved for developers and experienced professionals having in-depth
 * computer knowledge. Users are therefore encouraged to load and test the
 * software's suitability as regards their requirements in conditions enabling
 * the security of their systems and/or data to be ensured and, more generally,
 * to use and operate it in the same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-B license and that you accept its terms.
 */
package org.ichthyop.action;

import java.util.Random;
import org.ichthyop.util.MTRandom;
import org.ichthyop.particle.IParticle;
import org.ichthyop.particle.GriddedParticle;

/**
 * Simulates horizontal dispersion.
 *
 * <pre>
 * Ur = R * sqrt(2 * Kh / dt)
 * With R a real uniform random number in [-1; 1]
 * and Kh the Lagrangian horizontal diffusion of the form
 * Kh = pow(epsilon, 1/3) * pow(l, 4 / 3)
 * where l is the unresolved subgrid scale and epsilon the turbulent
 * dissipation rate.
 * Ref: Monin and Ozmidov, 1981
 *
 * In this case, R is generated by a Mersenne Twister pseudo random
 * number generator, epsilon = 1e-9 m2/s3 and l is taken as the cell size.
 *
 * Therefore the move of the particle due to horizontal dispersion is
 * dX = R * sqrt(2 * Kh * dt)
 * </pre>
 *
 * <p>
 * Copyright: Copyright (c) 2007-2011. Free software under GNU GPL</p>
 *
 * @author P.Verley
 */
public class HDispAction extends AbstractAction {

    private double cff;
    private Random random1, random2;
    private final double TWO_THIRD = 2.d / 3.d;
    private final double TWO_PI = 2.d * Math.PI;
    private final double ONE_DEG_LATITUDE_IN_METER = 111138.d;
    private final double TO_RADIAN = Math.PI / 180.d;

    @Override
    public String getKey() {
        return "action.hdisp";
    }

    @Override
    public void loadParameters() throws Exception {

        random1 = new MTRandom();
        random2 = new MTRandom();
        double epsilon = getConfiguration().getDouble("action.hdisp.epsilon");
        double epsilon16 = Math.pow(epsilon, 1.d / 6.d);
        double dt = getSimulationManager().getTimeManager().get_dt();
        // pre-computation
        cff = Math.sqrt(2.d * Math.abs(dt)) * epsilon16 / ONE_DEG_LATITUDE_IN_METER;
    }

    @Override
    public void init(IParticle particle) {
        // Nothing to do
    }

    @Override
    public void execute(IParticle particle) {

        double[] xyz = GriddedParticle.xyz(particle);
        int i = (int) Math.round(xyz[0]);
        int j = (int) Math.round(xyz[1]);
        double dL = 0.5 * (getSimulationManager().getGrid().get_dx(i, j)
                + getSimulationManager().getGrid().get_dy(i, j));
        double distance = (2.d * random1.nextDouble() - 1.d) * cff * Math.pow(dL, TWO_THIRD);
        double theta = TWO_PI * random2.nextDouble();
        double dlat = distance * Math.sin(theta);
        double dlon = distance * Math.cos(theta) / Math.cos(particle.getLat() * TO_RADIAN);
        particle.incrLat(dlat);
        particle.incrLon(dlon);
    }
}
