<?xml version="1.0" encoding="UTF-8"?>
<icstructure>
    <long_name>Generic Ichthyop configuration file</long_name>
    <description>The file has not any pre-defined dataset or release block.</description>
    <block type="option">
        <tree_path>Time/General time options</tree_path>
        <key>app.time</key>
        <description>Set the general time options of the simulation.</description>
        <parameters>
            <parameter type="serial">
                <key>initial_time</key>
                <long_name>Beginning of simulation</long_name>
                <value>year 2008 month 01 day 07 at 16:00</value>
                <format>date</format>
                <description>Set the date of beginning of simulation. Expressed in seconds ellapsed since the origin of time.</description>
            </parameter>
            <parameter type="serial">
                <key>transport_duration</key>
                <long_name>Transport duration</long_name>
                <value>0001 day(s) 00 hour(s) 00 minute(s)</value>
                <format>duration</format>
                <description>Set the duration of particle transport. Format: #### day(s) ## hour(s) ## minute(s)</description>
            </parameter>
            <parameter type="serial">
                <key>time_step</key>
                <long_name>Time step</long_name>
                <value>600</value>
                <format>integer</format>
                <description>The computational time step (dt) expressed in seconds. Take great care for setting this parameter. Simulation must not break the CFL criterion: (U * dt) / dX inferior to 1 with U the velocity and dX the move. An acceptable estimation could be dt = 0.7 * dGrid / Umax with dGrid the average length of the grid cells and Umax the order of magnitude of the fastest current velocities in the hydrodynamic model.</description>
            </parameter>
            <parameter>
                <key>calendar_type</key>
                <long_name>Type of calendar</long_name>
                <value>gregorian</value>
                <format>combo</format>
                <accepted>climato</accepted>
                <accepted>gregorian</accepted>
                <description>Choose the type of calendar for converting the time variable of the hydrodynamic model (expressed in seconds) into human readble time format. Climato: 360 days per year. Gregorian: the usual calendar. If you do not know, do not panic ! It is a "cosmetic" parameter that does not affect the run of the simulation. It only controls the display of time on screen.</description>
            </parameter>
            <parameter>
                <key>time_origin</key>
                <long_name>Origin of time</long_name>
                <value>1900/01/01 00:00</value>
                <description>This parameter comes with Gregorian type of calendar only. For hydrodynamic models that record time variable according to a Gregorian calendar, time is the number of seconds elapsed since an origin of time. Most of the time, origin of time starts 1900/01/01 00:00. Nevertheless, for some simulations, you may want to set another origin of time for the Gregorian calendar. This origin is usually defined as an attribute of the time variable in the hydrodynamic NetCDF output files.</description>
            </parameter>
            <parameter>
                <key>time_arrow</key>
                <long_name>Direction of the simulation</long_name>
                <value>forward</value>
                <format>combo</format>
                <accepted>backward</accepted>
                <accepted>forward</accepted>
                <description>Run the simulation backward or forward in time. Ichthyop advection schemes are not 'centered in time' which raises some questions for backtracking. Please refer to the userguide for details.</description>
            </parameter>
        </parameters>
    </block>
    <block type="option">
        <key>app.output</key>
        <description>Block of options that controls the record of the particle tracks in NetCDF ouput files.</description>
        <tree_path>IO/Output</tree_path>
        <parameters>
            <parameter>
                <key>file_prefix</key>
                <long_name>Prefix of the NetCDF output file</long_name>
                <value>your-prefix</value>
                <description>Type the prefix of the simulation output file. The output filename will look like your-prefix_ichthyop-runYYYYMMDDHHmm.nc</description>
            </parameter>
            <parameter>
                <key>output_path</key>
                <long_name>Output path</long_name>
                <value>output</value>
                <format>path</format>
                <description>Select the folder where the simulation NetCDF output file should be saved. Relative paths 'output' or 'output/' or './output' or './output/' are supported. They will be interpretated as /path_from_where_you_run_ichthyop/ouput/ If ouput folder does not exist, application will atempt to create it.</description>
            </parameter>
            <parameter>
                <key>record_frequency</key>
                <long_name>Record frequency</long_name>
                <value>1</value>
                <format>integer</format>
                <description>Lagrangian model runs with its own computational time-step, set in the 'time option block'. You may not need to record every step in the NetCDF output file. Set the record frequency as a number of computational time-steps. For instance, let's take dt = 1800s and record frequency = 6. Particle positions will be recorded every 3 hours (1800 * 6 = 10800s = 3h)</description>
            </parameter>
            <parameter>
                <key>trackers</key>
                <long_name>Variable tracking</long_name>
                <format>list</format>
                <value />
                <description>Name of some extra variables you wish to track in the NetCDF output file. It must exactly match the name of the corresponding variable in the hydrodynamic NetCDF input file. By default, ichthyop records time, longitude, latitude, depth and mortality. For instance, if you wish to track temperature and salinity at particle location, you should type the names of temperature and salinity variables as they are defined in the model ouput files.</description>
            </parameter>
        </parameters>
    </block>
    <block type="action">
        <key>action.advection</key>
        <description>Options that control the advection process</description>
        <tree_path>Transport/Advection</tree_path>
        <enabled>true</enabled>
        <parameters>
            <parameter>
                <key>scheme</key>
                <long_name>Numerical scheme</long_name>
                <value>euler</value>
                <format>combo</format>
                <accepted>euler</accepted>
                <accepted>rk4</accepted>
                <description>Use a forward Euler scheme (euler) or a Runge-Kutta 4th order scheme (rk4)</description>
            </parameter>
            <parameter>
                <key>horizontal</key>
                <long_name>Horizontal advection</long_name>
                <value>true</value>
                <format>boolean</format>
                <description>Determine whether horizontal advection is enabled</description>
            </parameter>
            <parameter>
                <key>vertical</key>
                <long_name>Vertical advection</long_name>
                <value>true</value>
                <format>boolean</format>
                <description>Determine whether vertical advection is enabled. For 2D simulations, this parameter is ignored.</description>
            </parameter>
            <parameter hidden="true">
                <key>class_name</key>
                <long_name>Java Class file</long_name>
                <value>org.previmer.ichthyop.action.AdvectionAction</value>
                <format>class</format>
                <description>The Java class called by the application to implement this action.</description>
            </parameter>
            <parameter hidden="true">
                <long_name>priority</long_name>
                <key>priority</key>
                <description>Level of priority of the action (comparatively to other actions). Each time step, high priority action will be called by the application before than a low priority action. Action with same level of priority will be called with no specific order.</description>
                <value>high</value>
                <format>combo</format>
                <accepted>lowest</accepted>
                <accepted>low</accepted>
                <accepted>normal</accepted>
                <accepted>high</accepted>
                <accepted>highest</accepted>
            </parameter>
        </parameters>
    </block>
    <block type="action">
        <key>action.hdisp</key>
        <description>Block of options that control the horizontal dispersion process. Reference: Monin and Ozmidov 1981</description>
        <tree_path>Advanced/Transport/Horizontal dispersion</tree_path>
        <enabled>false</enabled>
        <parameters>
            <parameter type="serial">
                <key>epsilon</key>
                <long_name>Dissipation rate</long_name>
                <value>1e-9</value>
                <description>Lagrangian horizontal dispersion has been implemented according to Monin and Ozmidov 1981. They defined a lagrangian horizontal diffusion coefficient Kh = pow(epsilon, 1/3) * pow(l, 4/3) with epsilon the turbulent dissipation rate and l the lenght of the grid cell (determined by the application). Epsilon suggested value is 1e-9. Make sure you have read and understood Monin and Ozmidov's paper before changing this value.</description>
                <format>float</format>
                <default>1e-9</default>
            </parameter>
            <parameter hidden="true">
                <key>class_name</key>
                <long_name>Java Class file</long_name>
                <value>org.previmer.ichthyop.action.HDispAction</value>
                <format>class</format>
                <description>The Java class called by the application to implement this action.</description>
            </parameter>
            <parameter hidden="true">
                <key>priority</key>
                <long_name>priority</long_name>
                <value>normal</value>
                <format>combo</format>
                <accepted>lowest</accepted>
                <accepted>low</accepted>
                <accepted>normal</accepted>
                <accepted>high</accepted>
                <accepted>highest</accepted>
                <description>Level of priority of the action (comparatively to other actions). Each time step, high priority action will be called by the application before than a low priority action. Action with same level of priority will be called with no specific order.</description>
            </parameter>
        </parameters>
    </block>
    <block type="action">
        <key>action.buoyancy</key>
        <description>Block of options that control the buoyancy process. This block can be enabled for 3D simulations only. It requires sea water salinity and sea water temperature fields to compute sea water density. Do not activate this process unless you know that the hydrodynamic dataset provides both variables.</description>
        <tree_path>Transport/Buoyancy</tree_path>
        <enabled>false</enabled>
        <parameters>
            <parameter type="serial">
                <key>particle_density</key>
                <long_name>Particle density</long_name>
                <value>1.025</value>
                <format>float</format>
                <default>1.025</default>
                <description>Particle density [g/cm3]. Basically, if density is superior to sea water density, particle will sink, if density is inferior to sea water density, particle will go up to the surface. If you want to force particles to keep close surface, take density = 0.9, for instance.</description>
            </parameter>
            <parameter>
                <key>age_max</key>
                <long_name>Maximum age</long_name>
                <value>3.0</value>
                <format>float</format>
                <default>3.0</default>
                <description>Maximum age [number of days] for adding buoyancy effect to the particle.</description>
            </parameter>
            <parameter>
                <key>salinity_field</key>
                <long_name>Salinity variable name</long_name>
                <value>sal</value>
                <default>salt</default>
                <description>The name of the salinity variable (case sensitive) in the hydrodynamic dataset.</description>
            </parameter>
            <parameter>
                <key>temperature_field</key>
                <long_name>Temperature variable name</long_name>
                <value>temp</value>
                <default>temp</default>
                <description>The name of the temperature variable (case sensitive) in the hydrodynamic dataset.</description>
            </parameter>
            <parameter hidden="true">
                <key>class_name</key>
                <long_name>Java Class file</long_name>
                <value>org.previmer.ichthyop.action.BuoyancyAction</value>
                <format>class</format>
                <description>The Java class called by the application to implement this action.</description>
            </parameter>
            <parameter hidden="true">
                <key>priority</key>
                <long_name>priority</long_name>
                <value>normal</value>
                <format>combo</format>
                <accepted>lowest</accepted>
                <accepted>low</accepted>
                <accepted>normal</accepted>
                <accepted>high</accepted>
                <accepted>highest</accepted>
                <description>Level of priority of the action (comparatively to other actions). Each time step, high priority action will be called by the application before than a low priority action. Action with same level of priority will be called with no specific order.</description>
            </parameter>
        </parameters>
    </block>
    <block type="action">
        <key>action.migration</key>
        <description>Block of options to control the Diel Vertical Migration (DVM) process of larvae. We impose deterministic pattern in which organisms reside at different depths at daytime and night-time. User can choose the daytime depth and the night-time depth, in meters. If the growth procedure is activated then the DVM operates during the larvae stages (yolk-sac and feeding larva). If not it operates after a “minimum age”. Setting the daytime depth equal to the night-time depth, the pattern forces the motion of particles at a constant depth.</description>
        <tree_path>Transport/Vertical migration</tree_path>
        <enabled>false</enabled>
        <parameters>
            <parameter>
                <key>daytime_depth</key>
                <long_name>Depth at daytime</long_name>
                <value>-10</value>
                <format>float</format>
                <description>Set the depth [meter] of the particle during daytime. Daytime period starts at sunrise and ends at sunset. Depth is negative number, but the application will automatically convert positive values multiplying by -1. You can set daytime depth = nightime depth to force motion of particle at constant depth.</description>
            </parameter>
            <parameter>
                <key>nighttime_depth</key>
                <long_name>Depth at nighttime</long_name>
                <value>-10</value>
                <format>float</format>
                <description>Set the depth [meter] of the particle during daytime. Daytime period starts at sunrise and ends at sunset. Depth is negative number, but the application will automatically convert positive values multiplying by -1. You can set daytime depth = nightime depth to force motion of particle at constant depth.</description>
            </parameter>
            <parameter>
                <key>sunrise</key>
                <long_name>Hour of sunrise</long_name>
                <value>07:00</value>
                <format>hour</format>
                <default>07:00</default>
                <description>Hour of sunrise HH:mm, 24 hours format. Make sure that sunrise occurs earlier than sunset.</description>
            </parameter>
            <parameter>
                <key>sunset</key>
                <long_name>Hour of sunset</long_name>
                <value>19:00</value>
                <default>19:00</default>
                <format>hour</format>
                <description>Hour of sunset HH:mm, 24 hours format. Make sure that sunset occurs later than sunrise.</description>
            </parameter>
            <parameter>
                <key>age_min</key>
                <long_name>Minimum age</long_name>
                <value>3.5</value>
                <format>float</format>
                <description>If the growth procedure is activated (See biology section) then the DVM operates during the larvae stages (yolk-sac and feeding larva) and this parameter is ignored by the application. If not migration only operates after this minimum age [days].</description>
            </parameter>
            <parameter hidden="true">
                <key>class_name</key>
                <long_name>Java Class file</long_name>
                <value>org.previmer.ichthyop.action.MigrationAction</value>
                <format>class</format>
                <description>The Java class called by the application to implement this action.</description>
            </parameter>
            <parameter hidden="true">
                <key>priority</key>
                <long_name>priority</long_name>
                <value>normal</value>
                <format>combo</format>
                <accepted>lowest</accepted>
                <accepted>low</accepted>
                <accepted>normal</accepted>
                <accepted>high</accepted>
                <accepted>highest</accepted>
                <description>Level of priority of the action (comparatively to other actions). Each time step, high priority action will be called by the application before than a low priority action. Action with same level of priority will be called with no specific order.</description>
            </parameter>
        </parameters>
    </block>
    <block type="option">
        <key>release.schedule</key>
        <description>Block of options to control multi-release events. In most cases, you do not need to define any release schedule, and all the particles are released at the beginning of the simulation (defined in the time section). This option affects the duration of the simulation. Simulation duration is calculated as follow: duration between initial_time and last_release_event plus transport_duration. This ensures that the transport duration is the same for all released particles. Technically, a particle whose age exceeds the duration of transport is “deactivated” and its variables remain constant until the end of the simulation.</description>
        <tree_path>Release/Schedule</tree_path>
        <parameters>
            <parameter>
                <key>is_enabled</key>
                <long_name>Use release schedule</long_name>
                <value>false</value>
                <format>boolean</format>
                <default>false</default>
                <description>Activate or deactivate the release schedule. If TRUE particles are released according to this release schedule. If FALSE all the particles are relased at the beginning of the simulation (defined in the time section)</description>
            </parameter>
            <parameter>
                <key>events</key>
                <long_name>Release event(s)</long_name>
                <value>"year 2010 month 05 day 13 at 10:00" "year 2010 month 05 day 14 at 10:00"</value>
                <format>list</format>
                <description>Set the dates [year #### month ## day ## at HH:mm] of the release events. You can define as much events as necessary. Just make sure that: 1. the first release events does not occur before the beginning of the simulation, 2. events are defined in chronological order.</description>
            </parameter>
        </parameters>
    </block>
    <block type="release">
        <key>release.zone</key>
        <tree_path>Release/From zone</tree_path>
        <description>Block of options for releasing particles within pre-defined geographical zones.</description>
        <enabled>true</enabled>
        <parameters>
            <parameter>
                <key>number_particles</key>
                <long_name>Number of particles</long_name>
                <value>100</value>
                <format>integer</format>
                <description>Number of particles released in the zones. The application randomly releases the particles within the zones in order to ensure a homogeneous distribution (constant "concentration" of particles among the zones). If several release events are defined (see section release schedule), this parameter becomes the number of particles releases in the zones per release event. It means the application totals number_particles_released_in_zones * number_release_events particles.</description>
            </parameter>
            <parameter>
                <key>zone_file</key>
                <long_name>Zone file</long_name>
                <value>cfg/my_zones.xml</value>
                <format>zonefile</format>
                <default>zone.xml</default>
                <description>Select an existing zone file (*.xml) or create a new one. Relative pathnames are supported (e.g 'cfg/my_zones1.xml' or '../my_zones2.xml' etc.).</description>
            </parameter>
            <parameter hidden="true">
                <key>class_name</key>
                <long_name>Java Class file</long_name>
                <value>org.previmer.ichthyop.release.ZoneRelease</value>
                <format>class</format>
                <description>The Java class called by the application to implement this release process.</description>
            </parameter>
        </parameters>
    </block>
    <block type="release">
        <key>release.txtfile</key>
        <tree_path>Release/From text file</tree_path>
        <description>Block of options for releasing particles with initial coordinates pre-defined in a textfile. The application reads the position of the particle in the text file and release them at time "Beginning of simulation". If the Release schedule is activated, the application will release all the drifters for every release event.</description>
        <enabled>false</enabled>
        <parameters>
            <parameter>
                <key>txtfile</key>
                <long_name>Drifter file</long_name>
                <value>cfg/my_drifters.txt</value>
                <format>textfile</format>
                <default>drifter.txt</default>
                <description>Select an existing drifter textfile (*.txt) or create a new one. Relative pathnames are supported (e.g 'cfg/my_drifters1.xml' or '../my_drifters2.xml' etc.).</description>
            </parameter>
            <parameter hidden="true">
                <key>class_name</key>
                <long_name>Java Class file</long_name>
                <format>class</format>
                <value>org.previmer.ichthyop.release.TxtFileRelease</value>
                <description>The Java class called by the application to implement this release process.</description>
            </parameter>
        </parameters>
    </block>
    <block type="release">
        <key>release.ncfile</key>
        <tree_path>Release/From NetCDF file</tree_path>
        <description>Block of options for releasing particles with initial coordinates read in an Ichthyop NetCDF output file. The application interpolates the position of the particle in the NetCDF file at time “Beginning of the simulation” or for every "Release event" if the release schedule is activated. It also reads the status of the particle. If the particle had already die, the application releases the particle but it is immediately disabled (not transported). Make sure the time “Beginning of simulation” (or the "Release events") is contained inside the NetCDF file, otherwise the application will crash.</description>
        <enabled>false</enabled>
        <parameters>
            <parameter>
                <key>ncfile</key>
                <long_name>NetCDF file</long_name>
                <value></value>
                <format>file</format>
                <description>Select an existing Ichthyop NetCDF output file. Relative pathnames are supported (e.g 'output/ichthyop-run201006291600.nc' or '../ichthyop-run201006291601.nc' etc.).</description>
            </parameter>
            <parameter hidden="true">
                <key>class_name</key>
                <long_name>Java Class file</long_name>
                <format>class</format>
                <value>org.previmer.ichthyop.release.NcFileRelease</value>
                <description>The Java class called by the application to implement this release process.</description>
            </parameter>
        </parameters>
    </block>
    <block type="release">
        <key>release.stain</key>
        <tree_path>Release/Stain</tree_path>
        <description>Block of options for releasing a "stain" of particle aroung a given location.</description>
        <enabled>false</enabled>
        <parameters>
            <parameter>
                <key>number_particles</key>
                <long_name>Number of particles</long_name>
                <value>1000</value>
                <format>integer</format>
                <description>Number of particles released in stain. If several release events are defined (see section release schedule), this parameter becomes the number of particles releases in the stain per release event. It means the application totals number_particles_released_in_zones * number_release_events particles.</description>
            </parameter>
            <parameter>
                <key>lon_stain</key>
                <long_name>Longitude (East)</long_name>
                <value>0.0</value>
                <format>lonlat</format>
                <description>Longitude [East degree] of the stain. You can change the coordinate format when editing the value.</description>
            </parameter>
            <parameter>
                <key>lat_stain</key>
                <long_name>Latitude (North)</long_name>
                <value>0.0</value>
                <format>lonlat</format>
                <description>Latitude North degree] of the stain. You can change the coordinate format when editing the value.</description>
            </parameter>
            <parameter>
                <key>depth_stain</key>
                <long_name>Depth (meter)</long_name>
                <value>-20.0</value>
                <format>float</format>
                <description>Depth [meter] of the stain. The parameter is ignored for 2D simulation. Positive depth is automatically converted by the application (depth = -depth)</description>
            </parameter>
            <parameter>
                <key>radius_stain</key>
                <long_name>Radius of the stain (meter)</long_name>
                <value>10000.0</value>
                <format>float</format>
                <description>Radius [meter] of the stain. Particles are randomly released (homogeneous distribution) within the circle defined by this radius.</description>
            </parameter>
            <parameter>
                <key>thickness_stain</key>
                <long_name>Thickness of the stain (meter)</long_name>
                <value>10.0</value>
                <format>float</format>
                <description>Thickness [meter] of the stain. This parameter is ignored for 2D simulation. Particles are randomly released within the layer [depth_stain - thickness / 2; depth_stain + thickness / 2]</description>
            </parameter>
            <parameter hidden="true">
                <key>class_name</key>
                <long_name>Java Class file</long_name>
                <format>class</format>
                <value>org.previmer.ichthyop.release.StainRelease</value>
                <description>The Java class called by the application to implement this release process.</description>
            </parameter>
        </parameters>
    </block>
    <block type="option">
        <key>app.particle_length</key>
        <tree_path>Biology/Early-life stages</tree_path>
        <description>Block of options for setting up particle's early-life stages. The pre-defined early life stages are egg, yolk-sac larva and feeding larva. Particles change stages at pre-defined length thresholds.</description>
        <parameters>
            <parameter>
                <key>hatch_length</key>
                <long_name>Hatch length</long_name>
                <value>2.8</value>
                <format>float</format>
                <description>Threshold length [millimeter] between egg and yolk-sac larva.</description>
            </parameter>
            <parameter>
                <key>initial_length</key>
                <long_name>Initial length</long_name>
                <value>0.025</value>
                <format>float</format>
                <description>Initial length [millimeter] of the egg.</description>
            </parameter>
            <parameter>
                <key>yolk2feeding_length</key>
                <long_name>Yolk to feeding length</long_name>
                <value>4.5</value>
                <format>float</format>
                <description>Threshold length [millimeter] between yolk-sac larva and feeding larva.</description>
            </parameter>
        </parameters>
    </block>
    <block type="action">
        <key>action.lethal_temp</key>
        <tree_path>Biology/Lethal temperature</tree_path>
        <enabled>false</enabled>
        <description>Block of option for setting up the lower lethal water temperature for the particles. The tool distinguishes between eggs and larvae lethal temperatures when the growth process is activated.</description>
        <parameters>
            <parameter>
                <key>lethal_temp_egg</key>
                <long_name>Lethal temperature (egg)</long_name>
                <value>14.0</value>
                <format>float</format>
                <description>Lower lethal water temperature [Celsius degree] for the particles. If the growth process is active, this parameter only affects particles at egg stage.</description>
            </parameter>
            <parameter>
                <key>lethal_temp_larva</key>
                <long_name>Lethal temperature (larva)</long_name>
                <value>12.O</value>
                <format>float</format>
                <description>Lower lethal water temperature [Celsius degree] for particles at larva stage (yolk-sac and feeding larva). This parameter is ignored by the application when the growth process is idle.</description>
            </parameter>
            <parameter>
                <key>temperature_field</key>
                <long_name>Temperature variable name</long_name>
                <value>temp</value>
                <default>temp</default>
                <description>The name of the temperature variable (case sensitive) in the hydrodynamic dataset.</description>
            </parameter>
            <parameter hidden="true">
                <key>class_name</key>
                <long_name>Java Class file</long_name>
                <value>org.previmer.ichthyop.action.LethalTempAction</value>
                <format>class</format>
                <description>The Java class called by the application to implement this action.</description>
            </parameter>
            <parameter hidden="true">
                <key>priority</key>
                <long_name>priority</long_name>
                <value>low</value>
                <format>combo</format>
                <accepted>lowest</accepted>
                <accepted>low</accepted>
                <accepted>normal</accepted>
                <accepted>high</accepted>
                <accepted>highest</accepted>
                <description>Level of priority of the action (comparatively to other actions). Each time step, high priority action will be called by the application before than a low priority action. Action with same level of priority will be called with no specific order.</description>
            </parameter>
        </parameters>
    </block>
    <block type="action">
        <key>action.growth</key>
        <tree_path>Biology/Growth</tree_path>
        <enabled>false</enabled>
        <description>Block of options for setting up the growth model. It simulates the growth in length of particles as a function of water temperature. Length increases linearly with time, at a growth rate that is a linear function of temperature: length(t + dt) = length(t) + (growth_coeff1 + growth_coeff2 * max(temp, threshold_temp)) * dt</description>
        <parameters>
            <parameter>
                <key>coeff1</key>
                <long_name>Growth coefficient 1</long_name>
                <value>0.03</value>
                <format>float</format>
                <description>Value of the first coefficient of the growth function (detailed in the block description)</description>
            </parameter>
            <parameter>
                <key>coeff2</key>
                <long_name>Growth coefficient 2</long_name>
                <value>0.03</value>
                <format>float</format>
                <description>Value of the second coefficient of the growth function (detailed in the block description)</description>
            </parameter>
            <parameter>
                <key>threshold_temp</key>
                <long_name>Threshold temperature</long_name>
                <value>10.0</value>
                <format>float</format>
                <description>Threshold temperature [Celsius degree] for the sea water. It ensures that the particles keep growing with a minimum rate, even though they are facing cold sea water.</description>
            </parameter>
            <parameter hidden="true">
                <key>class_name</key>
                <long_name>Java Class file</long_name>
                <value>org.previmer.ichthyop.action.LinearGrowthAction</value>
                <format>class</format>
                <description>The Java class called by the application to implement this action.</description>
            </parameter>
            <parameter hidden="true">
                <key>priority</key>
                <long_name>priority</long_name>
                <value>low</value>
                <format>combo</format>
                <accepted>lowest</accepted>
                <accepted>low</accepted>
                <accepted>normal</accepted>
                <accepted>high</accepted>
                <accepted>highest</accepted>
                <description>Level of priority of the action (comparatively to other actions). Each time step, high priority action will be called by the application before than a low priority action. Action with same level of priority will be called with no specific order.</description>
            </parameter>
        </parameters>
    </block>
    <block type="action">
        <key>action.recruit</key>
        <tree_path>Biology/Recruitment</tree_path>
        <enabled>false</enabled>
        <description>Block of options for defining some recruitment criterions and recruitment zones, in order to study, for instance, the recruitment success of a particular geographic area.</description>
        <parameters>
            <parameter>
                <key>criterion</key>
                <long_name>Recruitment criterion</long_name>
                <value>Age criterion</value>
                <format>combo</format>
                <accepted>Age criterion</accepted>
                <accepted>Length criterion</accepted>
                <default>Age criterion</default>
                <description>Select the type of criterion the application should use to check wheter a particle as been recruited or not. When the growth process is not activated, the criterion used for particles to be considered as recruited is necessarily a minimal age threshold. When growth is taken into account the criterion might also be a minimal length threshold. If you select the Length criterion though growth process is idle, application will crash.</description>
            </parameter>
            <parameter>
                <key>limit_age</key>
                <long_name>Recruitment limit age</long_name>
                <value>7.0</value>
                <format>float</format>
                <description>A particle must be "older" than the specified age [days] for potentially being recruited. This parameter is ignored if the recruitment criterion is based on the particle length.</description>
            </parameter>
            <parameter>
                <key>limit_length</key>
                <long_name>Reruitment limit length</long_name>
                <value>6.0</value>
                <format>float</format>
                <description>A particle must be "bigger" than the specified length [millimeter] for potentially being recruited. This parameter is ignored if the recruitment criterion is based on the particle age. Only use this criterion if the growth model is activated.</description>
            </parameter>
            <parameter>
                <key>duration_min</key>
                <long_name>Minimal duration in recruitment zone</long_name>
                <value>0.0</value>
                <format>float</format>
                <description>Minimal duration [days] a particle has to spend in a recruitment area to be considered as recruited.</description>
            </parameter>
            <parameter>
                <key>stop_moving</key>
                <long_name>Stop moving when recruited</long_name>
                <value>false</value>
                <format>boolean</format>
                <description>Force a particle to remain where it is as soon as it is recruited. If activated, the particle could not be recruited in any other recruitment area. On the contrary, a particle that does not stop moving when recruited can keep drifting and being recruited in others recruitment areas, as long as the recruitement conditions are fulfilled.</description>
            </parameter>
            <parameter hidden="true">
                <key>class_name</key>
                <long_name>Java Class file</long_name>
                <value>org.previmer.ichthyop.action.RecruitmentAction</value>
                <format>class</format>
                <description>The Java class called by the application to implement this action.</description>
            </parameter>
            <parameter hidden="true">
                <key>priority</key>
                <long_name>priority</long_name>
                <value>highest</value>
                <format>combo</format>
                <accepted>lowest</accepted>
                <accepted>low</accepted>
                <accepted>normal</accepted>
                <accepted>high</accepted>
                <accepted>highest</accepted>
                <description>Level of priority of the action (comparatively to other actions). Each time step, high priority action will be called by the application before than a low priority action. Action with same level of priority will be called with no specific order.</description>
            </parameter>
        </parameters>
    </block>
</icstructure>